// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: watch.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WatchServiceClient is the client API for WatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WatchServiceClient interface {
	// create
	Create(ctx context.Context, in *Watch, opts ...grpc.CallOption) (*Watch, error)
	// update
	Update(ctx context.Context, in *Watch, opts ...grpc.CallOption) (*WatchBoolResponse, error)
	// delete
	Delete(ctx context.Context, in *WatchIdRequest, opts ...grpc.CallOption) (*WatchBoolResponse, error)
	// get by id
	GetById(ctx context.Context, in *WatchIdRequest, opts ...grpc.CallOption) (*Watch, error)
	// get by Watch_type
	GetListByItem(ctx context.Context, in *WatchIdRequest, opts ...grpc.CallOption) (*WatchList, error)
	// get by Watch_type
	GetListByUser(ctx context.Context, in *WatchIdRequest, opts ...grpc.CallOption) (*WatchList, error)
	// get list by id list
	GetWatchListByIdList(ctx context.Context, in *WatchIdListRequest, opts ...grpc.CallOption) (*WatchList, error)
	// get all
	GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WatchList, error)
}

type watchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWatchServiceClient(cc grpc.ClientConnInterface) WatchServiceClient {
	return &watchServiceClient{cc}
}

func (c *watchServiceClient) Create(ctx context.Context, in *Watch, opts ...grpc.CallOption) (*Watch, error) {
	out := new(Watch)
	err := c.cc.Invoke(ctx, "/watch.WatchService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) Update(ctx context.Context, in *Watch, opts ...grpc.CallOption) (*WatchBoolResponse, error) {
	out := new(WatchBoolResponse)
	err := c.cc.Invoke(ctx, "/watch.WatchService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) Delete(ctx context.Context, in *WatchIdRequest, opts ...grpc.CallOption) (*WatchBoolResponse, error) {
	out := new(WatchBoolResponse)
	err := c.cc.Invoke(ctx, "/watch.WatchService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) GetById(ctx context.Context, in *WatchIdRequest, opts ...grpc.CallOption) (*Watch, error) {
	out := new(Watch)
	err := c.cc.Invoke(ctx, "/watch.WatchService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) GetListByItem(ctx context.Context, in *WatchIdRequest, opts ...grpc.CallOption) (*WatchList, error) {
	out := new(WatchList)
	err := c.cc.Invoke(ctx, "/watch.WatchService/GetListByItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) GetListByUser(ctx context.Context, in *WatchIdRequest, opts ...grpc.CallOption) (*WatchList, error) {
	out := new(WatchList)
	err := c.cc.Invoke(ctx, "/watch.WatchService/GetListByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) GetWatchListByIdList(ctx context.Context, in *WatchIdListRequest, opts ...grpc.CallOption) (*WatchList, error) {
	out := new(WatchList)
	err := c.cc.Invoke(ctx, "/watch.WatchService/GetWatchListByIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watchServiceClient) GetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WatchList, error) {
	out := new(WatchList)
	err := c.cc.Invoke(ctx, "/watch.WatchService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatchServiceServer is the server API for WatchService service.
// All implementations should embed UnimplementedWatchServiceServer
// for forward compatibility
type WatchServiceServer interface {
	// create
	Create(context.Context, *Watch) (*Watch, error)
	// update
	Update(context.Context, *Watch) (*WatchBoolResponse, error)
	// delete
	Delete(context.Context, *WatchIdRequest) (*WatchBoolResponse, error)
	// get by id
	GetById(context.Context, *WatchIdRequest) (*Watch, error)
	// get by Watch_type
	GetListByItem(context.Context, *WatchIdRequest) (*WatchList, error)
	// get by Watch_type
	GetListByUser(context.Context, *WatchIdRequest) (*WatchList, error)
	// get list by id list
	GetWatchListByIdList(context.Context, *WatchIdListRequest) (*WatchList, error)
	// get all
	GetAll(context.Context, *emptypb.Empty) (*WatchList, error)
}

// UnimplementedWatchServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWatchServiceServer struct {
}

func (UnimplementedWatchServiceServer) Create(context.Context, *Watch) (*Watch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWatchServiceServer) Update(context.Context, *Watch) (*WatchBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWatchServiceServer) Delete(context.Context, *WatchIdRequest) (*WatchBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWatchServiceServer) GetById(context.Context, *WatchIdRequest) (*Watch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedWatchServiceServer) GetListByItem(context.Context, *WatchIdRequest) (*WatchList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByItem not implemented")
}
func (UnimplementedWatchServiceServer) GetListByUser(context.Context, *WatchIdRequest) (*WatchList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByUser not implemented")
}
func (UnimplementedWatchServiceServer) GetWatchListByIdList(context.Context, *WatchIdListRequest) (*WatchList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWatchListByIdList not implemented")
}
func (UnimplementedWatchServiceServer) GetAll(context.Context, *emptypb.Empty) (*WatchList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}

// UnsafeWatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WatchServiceServer will
// result in compilation errors.
type UnsafeWatchServiceServer interface {
	mustEmbedUnimplementedWatchServiceServer()
}

func RegisterWatchServiceServer(s grpc.ServiceRegistrar, srv WatchServiceServer) {
	s.RegisterService(&WatchService_ServiceDesc, srv)
}

func _WatchService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Watch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watch.WatchService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).Create(ctx, req.(*Watch))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Watch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watch.WatchService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).Update(ctx, req.(*Watch))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watch.WatchService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).Delete(ctx, req.(*WatchIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watch.WatchService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).GetById(ctx, req.(*WatchIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_GetListByItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).GetListByItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watch.WatchService/GetListByItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).GetListByItem(ctx, req.(*WatchIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_GetListByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).GetListByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watch.WatchService/GetListByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).GetListByUser(ctx, req.(*WatchIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_GetWatchListByIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchIdListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).GetWatchListByIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watch.WatchService/GetWatchListByIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).GetWatchListByIdList(ctx, req.(*WatchIdListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WatchService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatchServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watch.WatchService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatchServiceServer).GetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WatchService_ServiceDesc is the grpc.ServiceDesc for WatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "watch.WatchService",
	HandlerType: (*WatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WatchService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WatchService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WatchService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _WatchService_GetById_Handler,
		},
		{
			MethodName: "GetListByItem",
			Handler:    _WatchService_GetListByItem_Handler,
		},
		{
			MethodName: "GetListByUser",
			Handler:    _WatchService_GetListByUser_Handler,
		},
		{
			MethodName: "GetWatchListByIdList",
			Handler:    _WatchService_GetWatchListByIdList_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _WatchService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "watch.proto",
}
